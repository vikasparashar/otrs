<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Support</Name>
    <Version>1.5.4</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2013-11-07 14:57:38" Version="1.5.4">Small fixes.</ChangeLog>
    <ChangeLog Date="2013-09-11 11:45:16" Version="1.5.3">Fixed icons.</ChangeLog>
    <ChangeLog Date="2013-08-19 14:59:15" Version="1.5.2">Code cleanup.</ChangeLog>
    <ChangeLog Date="2013-08-15 15:25:33" Version="1.5.1">Ported to OTRS 3.3.</ChangeLog>
    <Description Lang="en">Verifies System settings and gives performance tips.</Description>
    <Description Lang="de">Das Support-Assessment-Modul prüft fehlerhafte System-Einstellungen und gibt Performance-Tips.</Description>
    <Description Lang="es">Comprueba configuraciones del sistema y brinda consejos de rendimiento.</Description>
    <Framework>3.3.x</Framework>
    <IntroInstall Lang="en" Title="Notice - Introduction" Type="post">The Support assessment module provides system checks and can help to find setup errors. After installation it can be accessed from the Administration Interface, in the System Administration panel.</IntroInstall>
    <IntroInstall Lang="de" Title="Hinweis - Einführung" Type="post">Das Support-Assessment-Modul bietet Systemüberprüfungen an, mit denen Einrichtungsfehler erkannt werden können. Nach der Installation kann es über den Administrationsbereich im Abschnitt System-Administration aufgerufen werden.</IntroInstall>
    <IntroInstall Lang="es" Title="Notice - Introduction" Type="post">El módulo de evaluación de soporte proporciona comprobaciones del sistema y puede ayudar a encontrar errores de configuración. Después de la instalación se puede acceder desde la Interfaz de Administración, en el panel de administración del sistema.</IntroInstall>
    <BuildDate>2013-11-07 14:57:38</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/Support.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_Support.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/es_MX_Support.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AdminSupport.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminSupport.dtl" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminSupportLicenseText.dtl" Permission="644" Encode="Base64">IyAtLQojIEFkbWluU3VwcG9ydExpY2Vuc2VUZXh0LmR0bCAtIHByb3ZpZGVzIHRoZSBsaWNlbnNlIGRlZmluaXRpb24gZm9yIHRoZSBTdXBwb3J0CiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTMgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsQ29udGVudERFIC0tPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9IkNvbmZpZGVudGlhbCIgcm93cz0iMjIiIGNvbHM9Ijc4IiByZWFkb25seT0icmVhZG9ubHkiPkRhdGVuc2NodXR6CgpXaXIsIGRpZSBGaXJtYSBPVFJTIEFHLCBuZWhtZW4gZGVuIFNjaHV0eiBJaHJlciBwZXJzJm91bWw7bmxpY2hlbiBEYXRlbiBzZWhyIGVybnN0IHVuZCBoYWx0ZW4gdW5zIHN0cmlrdCBhbiBkaWUgUmVnZWxuIGRlciBEYXRlbnNjaHV0emdlc2V0emUuIEFsbGUgUGFzc3cmb3VtbDtydGVyIHdlcmRlbiB2b3IgZGVtIFZlcnNlbmRlbiBkZXIgSW5mb3JtYXRpb25lbiBhdXRvbWF0aXNpZXJ0IHVua2VubnRsaWNoIGdlbWFjaHQuIEluIGtlaW5lbSBGYWxsIHdlcmRlbiBkaWUgZXJob2JlbmVuIERhdGVuIHZlcmthdWZ0IG9kZXIgYXVzIGFuZGVyZW4gR3ImdXVtbDtuZGVuIGFuIHVuYXV0b3Jpc2llcnRlIERyaXR0ZSB3ZWl0ZXJnZWdlYmVuLgoKRGllIG5hY2hmb2xnZW5kZSBFcmtsJmF1bWw7cnVuZyBnaWJ0IElobmVuIGVpbmVuICZVdW1sO2JlcmJsaWNrIGRhciZ1dW1sO2Jlciwgd2llIHdpciBkaWVzZW4gU2NodXR6IGdldyZhdW1sO2hybGVpc3RlbiB1bmQgd2VsY2hlIEFydCB2b24gRGF0ZW4genUgd2VsY2hlbSBad2VjayAmdXVtbDtiZXJtaXR0ZWx0IHdlcmRlbi4KCkRhdGVuJnV1bWw7YmVybWl0dGx1bmcgZHVyY2ggZGFzICdTdXBwb3J0bW9kdWwnCkRpZSBGaXJtYSBPVFJTIEFHICZ1dW1sO2Jlcm1pdHRlbHQgdW5kIHNwZWljaGVydCBJbmZvcm1hdGlvbmVuLCBkaWUgZHVyY2ggZGFzICdTdXBwb3J0bW9kdWwnIGFuIGRpZSBGaXJtYSBPVFJTIEFHIHZlcnNlbmRldCB3ZXJkZW4uIERhYmVpIGhhbmRlbHQgZXMgc2ljaCB1bSBhdXNzY2hsaWUmc3psaWc7bGljaCB1bSBEYXRlbiwgZGllIGRpZSBGaXJtYSBPVFJTIEFHIGJlbiZvdW1sO3RpZ3QsIHVtIEZ1bmt0aW9uc2YmYXVtbDtoaWdrZWl0IHVuZCBMZWlzdHVuZ3NmJmF1bWw7aGlna2VpdCBkZXMgYmV0cm9mZmVuZW4gT1RSUy1TZXJ2ZXJzIHp1IGFuYWx5c2llcmVuLCBvZGVyIHVtIGVpbmUgS29udGFrdGF1Zm5haG1lIHp1IGVybSZvdW1sO2dsaWNoZW4uCgpTaWNoZXJoZWl0IElocmVyIHBlcnMmb3VtbDtubGljaGVuIERhdGVuCkRpZSBGaXJtYSBPVFJTIEFHIHNjaCZ1dW1sO3R6dCBJaHJlIHBlcnMmb3VtbDtubGljaGVuIERhdGVuIHZvciB1bmVybGF1YnRlbiBadWdyaWZmLCBWZXJ3ZW5kdW5nIG9kZXIgVmVyJm91bWw7ZmZlbnRsaWNodW5nLiBEaWUgRmlybWEgT1RSUyBBRyBzb3JndCBkYWYmdXVtbDtyLCBkYXNzIHZvbiBJaG5lbiBhdWYgZGVtIFNlcnZlciBnZXNwZWljaGVydGUgcGVycyZvdW1sO25saWNoZSBJbmZvcm1hdGlvbmVuIGluIGVpbmVyIGtvbnRyb2xsaWVydGVuLCBzaWNoZXJlbiBVbWdlYnVuZyB2b3IgdW5lcmxhdWJ0ZW0gWnVncmlmZiB1bmQgVmVyJm91bWw7ZmZlbnRsaWNodW5nIGdlc2NoJlV1bWw7dHp0IHNpbmQuCgpXZWl0ZXJnYWJlIElocmVyIERhdGVuCkRpZSBGaXJtYSBPVFJTIEFHIGdpYnQgSWhyZSBEYXRlbiBuaWNodCBhbiBEcml0dGUgd2VpdGVyLCBzb2Zlcm4gZGllcyBuaWNodCB6dXIgQWJ3aWNrbHVuZyBkZXMgR2VzY2gmYXVtbDtmdHN2ZXJrZWhyZXMgbiZvdW1sO3RpZyBpc3QuClNvd2VpdCBkaWUgRmlybWEgT1RSUyBBRyBnZXNldHpsaWNoIG9kZXIgcGVyIEdlcmljaHRzYmVzY2hsdXNzIGRhenUgdmVycGZsaWNodGV0IGlzdCwgZ2ViZW4gd2lyIElocmUgRGF0ZW4gbnVyIGFuIGF1c2t1bmZ0c2JlcmVjaHRpZ3RlIHN0YWF0bGljaGUgSW5zdGl0dXRpb25lbiB1bmQgQmVoJm91bWw7cmRlbiB3ZWl0ZXIuCgomQXVtbDtuZGVydW5nIGRpZXNlciBEYXRlbnNjaHV0emJlc3RpbW11bmdlbgpEaWUgRmlybWEgT1RSUyBBRyBiZWgmYXVtbDtsdCBzaWNoIGRhcyBSZWNodCB2b3IsIGRpZXNlIFNpY2hlcmhlaXRzLSB1bmQgRGF0ZW5zY2h1dHptYSZzemxpZztuYWhtZW4genUgdmVyJmF1bWw7bmRlcm4sIHNvd2VpdCBkaWVzIHdlZ2VuIGRlciB0ZWNobmlzY2hlbiBFbnR3aWNrbHVuZyBlcmZvcmRlcmxpY2ggd2lyZC4gSW4gc29sY2hlbiBGJmF1bWw7bGxlbiB3ZXJkZW4gd2lyIGF1Y2ggdW5zZXJlIEhpbndlaXNlIHp1bSBEYXRlbnNjaHV0eiBlbnRzcHJlY2hlbmQgYW5wYXNzZW4uIEJpdHRlIGJlYWNodGVuIFNpZSBkYWhlciBkaWUgamV3ZWlscyBha3R1ZWxsZSBWZXJzaW9uIHVuc2VyZXIgRGF0ZW5zY2h1dHplcmtsJmF1bWw7cnVuZy4KCkF1c2t1bmZ0c3JlY2h0ClNpZSBoYWJlbiBqZWRlcnplaXQgZGFzIFJlY2h0IGF1ZiBBdXNrdW5mdCAmdXVtbDtiZXIgZGllIGJleiZ1dW1sO2dsaWNoIElocmVyIFBlcnNvbiBnZXNwZWljaGVydGVuIERhdGVuLCBkZXJlbiBIZXJrdW5mdCB1bmQgRW1wZiZhdW1sO25nZXIgc293aWUgZGVuIFp3ZWNrIGRlciBEYXRlbnZlcmFyYmVpdHVuZy4gQXVza3VuZnQgJnV1bWw7YmVyIGRpZSBnZXNwZWljaGVydGVuIERhdGVuIGsmb3VtbDtubmVuIFNpZSB1bnRlciBpbmZvQG90cnMuY29tIGFuZm9yZGVybi4KCldlaXRlcmUgSW5mb3JtYXRpb25lbgpJaHIgVmVydHJhdWVuIGlzdCB1bnMgd2ljaHRpZy4gRGFoZXIgZ2ViZW4gd2lyIElobmVuIGdlcm5lIGplZGVyemVpdCBBdXNrdW5mdCAmdXVtbDtiZXIgZGllIFZlcmFyYmVpdHVuZyBJaHJlciBwZXJzb25lbmJlem9nZW5lbiBEYXRlbi4gV2VubiBTaWUgRnJhZ2VuIGhhYmVuLCBkaWUgSWhuZW4gZGllc2UgRGF0ZW5zY2h1dHplcmtsJmF1bWw7cnVuZyBuaWNodCBiZWFudHdvcnRlbiBrb25udGUgb2RlciB3ZW5uIFNpZSB3ZWl0ZXJlIEluZm9ybWF0aW9uZW4genUgZWluZW0gUHVua3QgdyZ1dW1sO25zY2hlbiwgd2VuZGVuIFNpZSBzaWNoIGJpdHRlIG1pdCBlaW5lciBFLU1haWwgYW4gaW5mb0BvdHJzLmNvbS4KICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+CjwhLS0gZHRsOmJsb2NrOkNvbmZpZGVudGlhbENvbnRlbnRERSAtLT4KPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsQ29udGVudEVOIC0tPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9IkNvbmZpZGVudGlhbCIgcm93cz0iMjIiIGNvbHM9Ijc4IiByZWFkb25seT0icmVhZG9ubHkiPkRhdGEgUHJvdGVjdGlvbgoKSGVyZSBhdCBPVFJTIEFHIHdlIHRha2UgdGhlIHByb3RlY3Rpb24gb2YgeW91ciBwZXJzb25hbCBkZXRhaWxzIHZlcnkgc2VyaW91c2x5IGFuZCBzdHJpY3RseSBhZGhlcmUgdG8gZGF0YSBwcm90ZWN0aW9uIGxhd3MuIEFsbCBwYXNzd29yZHMgYXJlIGF1dG9tYXRpY2FsbHkgbWFkZSB1bnJlY29nbml6YWJsZSBiZWZvcmUgdGhlIGluZm9ybWF0aW9uIGlzIHNlbnQuIFVuZGVyIG5vIGNpcmN1bXN0YW5jZXMgd2lsbCBhbnkgZGF0YSB3ZSBvYnRhaW4gYmUgc29sZCBvciBwYXNzZWQgb24gdG8gdW5hdXRob3JpemVkIHRoaXJkIHBhcnRpZXMuClRoZSBmb2xsb3dpbmcgZXhwbGFuYXRpb24gcHJvdmlkZXMgeW91IHdpdGggYW4gb3ZlcnZpZXcgb2YgaG93IHdlIGd1YXJhbnRlZSB0aGlzIHByb3RlY3Rpb24gYW5kIHdoaWNoIHR5cGUgb2YgZGF0YSBpcyBjb2xsZWN0ZWQgZm9yIHdoaWNoIHB1cnBvc2UuCgpEYXRhIEhhbmRsaW5nIHdpdGggJ1N1cHBvcnQgTW9kdWxlJwpJbmZvcm1hdGlvbiByZWNlaXZlZCB0aHJvdWdoIHRoZSAnU3VwcG9ydCBNb2R1bGUnIGlzIHNhdmVkIGJ5IE9UUlMgQUcuIFRoaXMgb25seSBhcHBsaWVzIHRvIGRhdGEgdGhhdCBPVFJTIEFHIHJlcXVpcmVzIHRvIGFuYWx5emUgdGhlIHBlcmZvcm1hbmNlIGFuZCBmdW5jdGlvbiBvZiB0aGUgT1RSUyBzZXJ2ZXIgb3IgdG8gZXN0YWJsaXNoIGNvbnRhY3QuCgpTYWZldHkgb2YgUGVyc29uYWwgRGV0YWlscwpPVFJTIEFHIHByb3RlY3RzIHlvdXIgcGVyc29uYWwgZGF0YSBmcm9tIHVuYXV0aG9yaXplZCBhY2Nlc3MsIHVzZSBvciBwdWJsaWNhdGlvbi4gT1RSUyBBRyBlbnN1cmVzIHRoYXQgdGhlIHBlcnNvbmFsIGluZm9ybWF0aW9uIHlvdSBzdG9yZSBvbiB0aGUgc2VydmVyIGlzIHByb3RlY3RlZCBmcm9tIHVuYXV0aG9yaXplZCBhY2Nlc3MgYW5kIHB1YmxpY2F0aW9uLgoKRGlzY2xvc3VyZSBvZiBEZXRhaWxzCk9UUlMgQUcgd2lsbCBub3QgcGFzcyBvbiB5b3VyIGRldGFpbHMgdG8gdGhpcmQgcGFydGllcyB1bmxlc3MgcmVxdWlyZWQgZm9yIGJ1c2luZXNzIHRyYW5zYWN0aW9ucy4KT1RSUyBBRyB3aWxsIG9ubHkgcGFzcyBvbiB5b3VyIGRldGFpbHMgdG8gZW50aXRsZWQgcHVibGljIGluc3RpdHV0aW9ucyBhbmQgYXV0aG9yaXRpZXMgaWYgcmVxdWlyZWQgYnkgbGF3IG9yIGNvdXJ0IG9yZGVyLgoKQW1lbmRtZW50IG9mIERhdGEgUHJvdGVjdGlvbiBQb2xpY3kKT1RSUyBBRyByZXNlcnZlcyB0aGUgcmlnaHQgdG8gYW1lbmQgdGhpcyBzZWN1cml0eSBhbmQgZGF0YSBwcm90ZWN0aW9uIHBvbGljeSBpZiByZXF1aXJlZCBieSB0ZWNobmljYWwgZGV2ZWxvcG1lbnRzLiBJbiB0aGlzIGNhc2Ugd2Ugd2lsbCBhbHNvIGFkYXB0IG91ciBpbmZvcm1hdGlvbiByZWdhcmRpbmcgZGF0YSBwcm90ZWN0aW9uIGFjY29yZGluZ2x5LiBQbGVhc2UgcmVndWxhcmx5IHJlZmVyIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBvdXIgRGF0YSBQcm90ZWN0aW9uIFBvbGljeS4KClJpZ2h0IHRvIEluZm9ybWF0aW9uCllvdSBoYXZlIHRoZSByaWdodCB0byBkZW1hbmQgaW5mb3JtYXRpb24gY29uY2VybmluZyB0aGUgZGF0YSBzYXZlZCBhYm91dCB5b3UsIGl0cyBvcmlnaW4gYW5kIHJlY2lwaWVudHMsIGFzIHdlbGwgYXMgdGhlIHB1cnBvc2Ugb2YgdGhlIGRhdGEgcHJvY2Vzc2luZyBhdCBhbnkgdGltZS4gWW91IGNhbiByZXF1ZXN0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBzYXZlZCBkYXRhIGJ5IHNlbmRpbmcgYW4gZS1tYWlsIHRvIGluZm9Ab3Rycy5jb20uCgpGdXJ0aGVyIEluZm9ybWF0aW9uCllvdXIgdHJ1c3QgaXMgdmVyeSBpbXBvcnRhbnQgdG8gdXMuIFdlIGFyZSB3aWxsaW5nIHRvIGluZm9ybSB5b3UgYWJvdXQgdGhlIHByb2Nlc3Npbmcgb2YgeW91ciBwZXJzb25hbCBkZXRhaWxzIGF0IGFueSB0aW1lLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIHRoYXQgaGF2ZSBub3QgYmVlbiBhbnN3ZXJlZCBieSB0aGlzIERhdGEgUHJvdGVjdGlvbiBQb2xpY3kgb3IgaWYgeW91IHJlcXVpcmUgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIHRvcGljLCBwbGVhc2UgY29udGFjdCBpbmZvQG90cnMuY29tLgoKICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+CjwhLS0gZHRsOmJsb2NrOkNvbmZpZGVudGlhbENvbnRlbnRFTiAtLT4K</File>
        <File Location="Kernel/System/Support.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9EYXRhYmFzZS5wbSAtIGFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMyBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTsKIyMgbm9maWx0ZXIoVGlkeUFsbDo6UGx1Z2luOjpPVFJTOjpQZXJsOjpMYXlvdXRPYmplY3QpCgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgdmFycyBxdyhASVNBICRWRVJTSU9OKTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6RGF0YWJhc2UgLSBnbG9iYWwgc3lzdGVtIGluZm9ybWF0aW9uCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24gdG8gYSBydW5uaW5nIE9UUlMgaG9zdC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIERhdGFiYXNlIGluZm8gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6Q29uZmlnOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpFbmNvZGU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkxvZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6REI7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OkRhdGFiYXNlOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICREQk9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpEQi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7CiAgICBteSAkU3lzdGVtSW5mb09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIERCT2JqZWN0ICAgICA9PiAkREJPYmplY3QsCiAgICAgICAgTWFpbk9iamVjdCAgID0+ICRNYWluT2JqZWN0LAogICAgKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIChxdyhDb25maWdPYmplY3QgTG9nT2JqZWN0IE1haW5PYmplY3QgREJPYmplY3QgRW5jb2RlT2JqZWN0IExheW91dE9iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRffSA9ICRQYXJhbXskX30gfHwgZGllICJHb3Qgbm8gJF8hIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIEFkbWluQ2hlY2tzR2V0KCkKCnJldHVybnMgYSBhcnJheSByZWZlcmVuY2Ugd2l0aCBBZG1pbkNoZWNrcyBpbmZvcm1hdGlvbi4KCiREYXRhYmFzZUFycmF5ID0+IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTmFtZSA9PiAnUGxhdHRmb3JtJywKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ0xpbnV4JywKICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0+ICdQbGVhc2UgYWRkIG1vcmUgbWVtb3J5LicsCiAgICAgICAgICAgICAgICBDaGVjayA9PiAnT0snLAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBOYW1lID0+ICdWZXJzaW9uJywKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ29wZW5TVVNFIDEwLjInLAogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJ1BsZWFzZSBhZGQgbW9yZSBtZW1vcnkuJywKICAgICAgICAgICAgICAgIENoZWNrID0+ICdPSycsCiAgICAgICAgICAgIH0sCiAgICAgICAgXTsKCj1jdXQKCnN1YiBBZG1pbkNoZWNrc0dldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhQXJyYXkgPSBbXTsKCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICAjIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgZGF0YWJhc2VzCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCgogICAgIyBwbGVhc2UgYWRkIGZvciBlYWNoIG5ldyBjaGVjayBhIHBhcnQgbGlrZSB0aGlzCiAgICAjICAgIG15ICRPbmVDaGVjayA9ICRTZWxmLT5DaGVjaygpOwogICAgIyAgICBwdXNoIChAeyREYXRhQXJyYXl9LCAkT25lQ2hlY2spOwoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgR2V0IGluZm9ybWF0aW9uIGFib3V0IHVzZWQgZGF0YWJhc2UKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKCiAgICAjIHRyeSB0byBmaW5kIG91dCB3aGljaCB0aWNrZXQgZGF0YWJhc2UgaXMgY29uZmlndXJlZAogICAgbXkgJERhdGFiYXNlVHlwZSA9ICRTZWxmLT57REJPYmplY3R9LT57J0RCOjpUeXBlJ307CgogICAgIyB0cnkgdG8gZ2V0IGF2YWlsYWJsZSBtb2R1bGVzIGFuZCB0aGUgZGlyZWN0b3J5IG5hbWUKICAgIG15ICREaXJOYW1lID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0hvbWUnKSAuICIvS2VybmVsL1N5c3RlbS9TdXBwb3J0L0RhdGFiYXNlIjsKCiAgICAjIHJlYWQgYWxsIGF2YWlsYWJsZSBtb2R1bGVzIGluIEBMaXN0CiAgICBteSBATGlzdCA9IGdsb2IoICREaXJOYW1lIC4gIi8qLnBtIiApOwogICAgZm9yIG15ICRGaWxlIChATGlzdCkgewoKICAgICAgICAjIHJlbW92ZSAucG0KICAgICAgICAkRmlsZSA9fiBzL14uKlwvKC4rPylcLnBtJC8kMS87CiAgICAgICAgaWYgKCAkRGF0YWJhc2VUeXBlID1+IC9PREJDL2kgKSB7CiAgICAgICAgICAgICREYXRhYmFzZVR5cGUgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnRGF0YWJhc2U6OlR5cGUnKTsKICAgICAgICB9CiAgICAgICAgaWYgKCAkRGF0YWJhc2VUeXBlID1+IC9eJEZpbGUvaSApIHsKICAgICAgICAgICAgbXkgJEdlbmVyaWNNb2R1bGUgPSAiS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OkRhdGFiYXNlOjokRmlsZSI7CgogICAgICAgICAgICAjIGxvYWQgbW9kdWxlICRHZW5lcmljTW9kdWxlIGFuZCBjaGVjayBpZiBsb2FkYWJsZQogICAgICAgICAgICBpZiAoICRTZWxmLT57TWFpbk9iamVjdH0tPlJlcXVpcmUoJEdlbmVyaWNNb2R1bGUpICkgewoKICAgICAgICAgICAgICAgICMgY3JlYXRlIG5ldyBvYmplY3QKICAgICAgICAgICAgICAgIG15ICRTdXBwb3J0T2JqZWN0ID0gJEdlbmVyaWNNb2R1bGUtPm5ldyggJXskU2VsZn0gKTsKICAgICAgICAgICAgICAgIGlmICgkU3VwcG9ydE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIG15ICRBcnJheVJlZiA9ICRTdXBwb3J0T2JqZWN0LT5BZG1pbkNoZWNrc0dldCgpOwogICAgICAgICAgICAgICAgICAgIGlmICggJEFycmF5UmVmICYmIHJlZigkQXJyYXlSZWYpIGVxICdBUlJBWScgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2goIEB7JERhdGFBcnJheX0sIEB7JEFycmF5UmVmfSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcmV0dXJuICREYXRhQXJyYXk7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/Support/OS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/OTRS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Webserver/IIS.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIvSUlTLnBtIC0gYWxsIHJlcXVpcmVkIHN5c3RlbSBpbmZvcm1hdGlvbgojIENvcHlyaWdodCAoQykgMjAwMS0yMDEzIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlcjo6SUlTOwojIyBub2ZpbHRlcihUaWR5QWxsOjpQbHVnaW46Ok9UUlM6OlBlcmw6OkxheW91dE9iamVjdCkKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgKHF3KENvbmZpZ09iamVjdCBMb2dPYmplY3QgTGF5b3V0T2JqZWN0KSkgewogICAgICAgICRTZWxmLT57JF99ID0gJFBhcmFteyRffSB8fCBkaWUgIkdvdCBubyAkXyEiOwogICAgfQoKICAgICMgY3JlYXRlIGFkZGl0aW9uYWwgb2JqZWN0cwogICAgJFNlbGYtPntMYW5ndWFnZU9iamVjdH0gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH07CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgQWRtaW5DaGVja3NHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuYW1lcyBvZiBhdmFpbGFibGUgY2hlY2tzIGZyb20gc3lzY29uZmlnCiAgICBteSAkQ2hlY2tzID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ1N1cHBvcnQ6OldlYnNlcnZlcjo6SUlTJyk7CgogICAgIyBmaW5kIG91dCB3aGljaCBjaGVja3Mgc2hvdWxkIGFyZSBlbmFibGVkIGluIHN5c2NvbmZpZwogICAgbXkgQEVuYWJsZWRDaGVja0Z1bmN0aW9uczsKICAgIGlmICggJENoZWNrcyAmJiByZWYgJENoZWNrcyBlcSAnSEFTSCcgKSB7CgogICAgICAgICMgZ2V0IGFsbCBlbmFibGVkIGNoZWNrIGZ1bmN0aW9uIG5hbWVzCiAgICAgICAgQEVuYWJsZWRDaGVja0Z1bmN0aW9ucyA9IHNvcnQgZ3JlcCB7ICRDaGVja3MtPnskX30gfSBrZXlzICV7JENoZWNrc307CiAgICB9CgogICAgIyB0byBzdG9yZSB0aGUgcmVzdWx0CiAgICBteSBARGF0YUFycmF5OwoKICAgIEZVTkNUSU9OTkFNRToKICAgIGZvciBteSAkRnVuY3Rpb25OYW1lIChARW5hYmxlZENoZWNrRnVuY3Rpb25zKSB7CgogICAgICAgICMgcHJlcGVuZCBhbiB1bmRlcnNjb3JlCiAgICAgICAgJEZ1bmN0aW9uTmFtZSA9ICdfJyAuICRGdW5jdGlvbk5hbWU7CgogICAgICAgICMgcnVuIGZ1bmN0aW9uIGFuZCBnZXQgY2hlY2sgZGF0YQogICAgICAgIG15ICRDaGVjayA9ICRTZWxmLT4kRnVuY3Rpb25OYW1lKCk7CgogICAgICAgIG5leHQgRlVOQ1RJT05OQU1FIGlmICEkQ2hlY2s7CgogICAgICAgICMgYXR0YWNoIGNoZWNrIGRhdGEgaWYgdmFsaWQKICAgICAgICBwdXNoIEBEYXRhQXJyYXksICRDaGVjazsKICAgIH0KCiAgICByZXR1cm4gXEBEYXRhQXJyYXk7Cn0KCnN1YiBfUGVybEV4Q2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSA9IHt9OwoKICAgIG15ICRDaGVjayAgID0gJyc7CiAgICBteSAkTWVzc2FnZSA9ICcnOwogICAgaWYgKCAkRU5WeydHQVRFV0FZX0lOVEVSRkFDRSd9ICYmICRFTlZ7J0dBVEVXQVlfSU5URVJGQUNFJ30gPX4gL15DR0ktUGVybEV4L2kgKSB7CiAgICAgICAgJENoZWNrID0gJ09LJzsKICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1BlcmxFeCBpcyBpbiB1c2UnKSAuICIgKCRFTlZ7J0dBVEVXQVlfSU5URVJGQUNFJ30pLiI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkQ2hlY2sgPSAnRmFpbGVkJzsKICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICA9ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ1lvdSBzaG91bGQgdXNlIFBlcmxFeCB0byBpbmNyZWFzZSB5b3VyIHBlcmZvcm1hbmNlLicpOwogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJ1BlcmxFeCcsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ2hlY2sgaWYgUGVybEV4IGlzIHVzZWQuJyksCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9JSVNWZXJzaW9uQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSAgICA9IHt9OwogICAgbXkgJENoZWNrICAgPSAnJzsKICAgIG15ICRNZXNzYWdlID0gJyc7CiAgICBpZiAoICRFTlZ7U0VSVkVSX1NPRlRXQVJFfSApIHsKICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgJE1lc3NhZ2UgPSAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdZb3UgYXJlIHJ1bm5pbmcnKSAuICIgJEVOVntTRVJWRVJfU09GVFdBUkV9LiI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkQ2hlY2sgICA9ICdGYWlsZWQnOwogICAgICAgICRNZXNzYWdlID0gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnQ291bGQgbm90IGRldGVybWluZSBJSVMgdmVyc2lvbi4nKTsKICAgIH0KICAgICREYXRhID0gewogICAgICAgIE5hbWUgICAgICAgID0+ICRTZWxmLT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJ0lJUyBWZXJzaW9uJyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGlzcGxheSB3ZWIgc2VydmVyIHZlcnNpb24uJyksCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9JSVNFbnZpcm9ubWVudENoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJUVudmlyb25tZW50ID0gJUVOVjsKCiAgICBmb3IgbXkgJE5vdE5lZWRlZFN0cmluZyAoCiAgICAgICAgcXcoIEhUVFBfUkVGRVJFUiAgICAgICAgIEhUVFBfQ0FDSEVfQ09OVFJPTCAgIEhUVFBfQ09PS0lFICAgIEhUVFBfVVNFUl9BR0VOVAogICAgICAgIEhUVFBfQUNDRVBUX0xBTkdVQUdFIEhUVFBfQUNDRVBUX0VOQ09ESU5HIEhUVFBfQUNDRVBUCiAgICAgICAgUVVFUllfU1RSSU5HICAgICAgICAgUkVRVUVTVF9NRVRIT0QgICAgICAgUkVRVUVTVF9VUkkgICAgU0NSSVBUX05BTUUKICAgICAgICBBTExVU0VSU1BST0ZJTEUgICAgICBBUFBEQVRBICAgICAgICAgICAgICBMT0NBTEFQUERBVEEgICBDT01NT05QUk9HUkFNRklMRVMKICAgICAgICBQUk9HUkFNREFUQSAgICAgICAgICBQUk9HUkFNRklMRVMgICAgICAgICBQU01PRFVMRVBBVEggICBQVUJMSUMKICAgICAgICBTWVNURU1EUklWRSAgICAgICAgICBTWVNURU1ST09UICAgICAgICAgICBURU1QICAgICAgICAgICBXSU5ESVIKICAgICAgICBVU0VSUFJPRklMRSApCiAgICAgICAgKQogICAgewogICAgICAgIGRlbGV0ZSAkRW52aXJvbm1lbnR7JE5vdE5lZWRlZFN0cmluZ307CiAgICB9CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnU2VydmVyIEVudmlyb25tZW50JyksCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJFNlbGYtPntMYW5ndWFnZU9iamVjdH0tPkdldCgnRGlzcGxheSBlbnZpcm9ubWVudCB2YXJpYWJsZXMnKSwKICAgICAgICBDb21tZW50ICAgICA9PiAkU2VsZi0+e0xhbmd1YWdlT2JqZWN0fS0+R2V0KCdHZW5lcmFsIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgc3lzdGVtLicpLAogICAgICAgIENoZWNrICAgICAgID0+ICdPSycsCiAgICAgICAgQmxvY2tTdHlsZSAgPT4gJ1RhYmxlRGF0YVNpbXBsZScsCiAgICAgICAgVGFibGVJbmZvICAgPT4gXCVFbnZpcm9ubWVudCwKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCjE7Cg==</File>
        <File Location="Kernel/System/Support/Webserver/Apache.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/oracle.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/mssql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/postgresql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/mysql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Webserver.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIucG0gLSBhbGwgcmVxdWlyZWQgc3lzdGVtIGluZm9ybWF0aW9uCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTMgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6V2Vic2VydmVyOwojIyBub2ZpbHRlcihUaWR5QWxsOjpQbHVnaW46Ok9UUlM6OlBlcmw6OkxheW91dE9iamVjdCkKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpXZWJzZXJ2ZXIgLSBnbG9iYWwgc3lzdGVtIGluZm9ybWF0aW9uCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24gdG8gYSBydW5uaW5nIE9UUlMgaG9zdC4KCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIFdlYnNlcnZlciBpbmZvIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok1haW47CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlcjsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkU3lzdGVtSW5mb09iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpXZWJzZXJ2ZXItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgKHF3KENvbmZpZ09iamVjdCBMb2dPYmplY3QgTWFpbk9iamVjdCBMYXlvdXRPYmplY3QpKSB7CiAgICAgICAgJFNlbGYtPnskX30gPSAkUGFyYW17JF99IHx8IGRpZSAiR290IG5vICRfISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBBZG1pbkNoZWNrc0dldCgpCgpyZXR1cm5zIGEgYXJyYXkgcmVmZXJlbmNlIHdpdGggQWRtaW5DaGVja3MgaW5mb3JtYXRpb24uCgokV2Vic2VydmVyQXJyYXkgPT4gWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBOYW1lID0+ICdQbGF0dGZvcm0nLAogICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnTGludXgnLAogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJ1BsZWFzZSBhZGQgbW9yZSBtZW1vcnkuJywKICAgICAgICAgICAgICAgIENoZWNrID0+ICdPSycsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1ZlcnNpb24nLAogICAgICAgICAgICAgICAgQ29tbWVudCA9PiAnb3BlblNVU0UgMTAuMicsCiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9PiAnUGxlYXNlIGFkZCBtb3JlIG1lbW9yeS4nLAogICAgICAgICAgICAgICAgQ2hlY2sgPT4gJ09LJywKICAgICAgICAgICAgfSwKICAgICAgICBdOwoKPWN1dAoKc3ViIEFkbWluQ2hlY2tzR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJERhdGFBcnJheSA9IFtdOwoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCBXZWJzZXJ2ZXJzCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCgogICAgIyBwbGVhc2UgYWRkIGZvciBlYWNoIG5ldyBjaGVjayBhIHBhcnQgbGlrZSB0aGlzCiAgICAjICAgIG15ICRPbmVDaGVjayA9ICRTZWxmLT5DaGVjaygpOwogICAgIyAgICBwdXNoIChAeyREYXRhQXJyYXl9LCAkT25lQ2hlY2spOwoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgR2V0IGluZm9ybWF0aW9uIGFib3V0IHVzZWQgV2Vic2VydmVyCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCgogICAgIyB0cnkgdG8gZmluZCBvdXQgd2hpY2ggV2Vic2VydmVyIGlzIGNvbmZpZ3VyZWQKICAgIG15ICRXZWJzZXJ2ZXJUeXBlID0gJyc7CiAgICBpZiAoICRFTlZ7U0VSVkVSX1NPRlRXQVJFfSA9fiAvYXBhY2hlL2kgKSB7CiAgICAgICAgJFdlYnNlcnZlclR5cGUgPSAnQXBhY2hlJzsKICAgIH0KICAgIGVsc2UgewogICAgICAgICRXZWJzZXJ2ZXJUeXBlID0gJ0lJUyc7CiAgICB9CgogICAgIyB0cnkgdG8gZ2V0IGF2YWlsYWJsZSBtb2R1bGVzIGFuZCB0aGUgZGlyZWN0b3J5IG5hbWUKICAgIG15ICREaXJOYW1lID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0hvbWUnKSAuICcvS2VybmVsL1N5c3RlbS9TdXBwb3J0L1dlYnNlcnZlcic7CgogICAgIyByZWFkIGFsbCBhdmFpbGFibGUgbW9kdWxlcyBpbiBATGlzdAogICAgbXkgQExpc3QgPSBnbG9iKCAkRGlyTmFtZSAuICcvKi5wbScgKTsKICAgIGZvciBteSAkRmlsZSAoQExpc3QpIHsKCiAgICAgICAgIyByZW1vdmUgLnBtCiAgICAgICAgJEZpbGUgPX4gcy9eLipcLyguKz8pXC5wbSQvJDEvOwogICAgICAgIGlmICggJFdlYnNlcnZlclR5cGUgPX4gL14kRmlsZS9pICkgewogICAgICAgICAgICBteSAkR2VuZXJpY01vZHVsZSA9ICJLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6V2Vic2VydmVyOjokRmlsZSI7CgogICAgICAgICAgICAjIGxvYWQgbW9kdWxlICRHZW5lcmljTW9kdWxlIGFuZCBjaGVjayBpZiBsb2FkYWJsZQogICAgICAgICAgICBpZiAoICRTZWxmLT57TWFpbk9iamVjdH0tPlJlcXVpcmUoJEdlbmVyaWNNb2R1bGUpICkgewoKICAgICAgICAgICAgICAgICMgY3JlYXRlIG5ldyBvYmplY3QKICAgICAgICAgICAgICAgIG15ICRTdXBwb3J0T2JqZWN0ID0gJEdlbmVyaWNNb2R1bGUtPm5ldyggJXskU2VsZn0gKTsKICAgICAgICAgICAgICAgIGlmICgkU3VwcG9ydE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIG15ICRBcnJheVJlZiA9ICRTdXBwb3J0T2JqZWN0LT5BZG1pbkNoZWNrc0dldCgpOwogICAgICAgICAgICAgICAgICAgIGlmICggJEFycmF5UmVmICYmIHJlZigkQXJyYXlSZWYpIGVxICdBUlJBWScgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2goIEB7JERhdGFBcnJheX0sIEB7JEFycmF5UmVmfSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcmV0dXJuICREYXRhQXJyYXk7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/cpan-lib/Archive/Tar/Constant.pm" Permission="644" Encode="Base64">cGFja2FnZSBBcmNoaXZlOjpUYXI6OkNvbnN0YW50OwoKQkVHSU4gewogICAgcmVxdWlyZSBFeHBvcnRlcjsKICAgICRWRVJTSU9OPSAnMC4wMic7CiAgICBASVNBICAgID0gcXdbRXhwb3J0ZXJdOwogICAgQEVYUE9SVCA9IHF3WwogICAgICAgICAgICAgICAgRklMRSBIQVJETElOSyBTWU1MSU5LIENIQVJERVYgQkxPQ0tERVYgRElSIEZJRk8gU09DS0VUIFVOS05PV04KICAgICAgICAgICAgICAgIEJVRkZFUiBIRUFEIFJFQURfT05MWSBXUklURV9PTkxZIFVOUEFDSyBQQUNLIFRJTUVfT0ZGU0VUIFpMSUIKICAgICAgICAgICAgICAgIEJMT0NLX1NJWkUgVEFSX1BBRCBUQVJfRU5EIE9OX1VOSVggQkxPQ0sgQ0FOX1JFQURMSU5LIE1BR0lDIAogICAgICAgICAgICAgICAgVEFSX1ZFUlNJT04gVU5BTUUgR05BTUUgQ0FOX0NIT1dOIE1PREUgQ0hFQ0tfU1VNIFVJRCBHSUQgCiAgICAgICAgICAgICAgICBHWklQX01BR0lDX05VTSBNT0RFX1JFQUQgTE9OR0xJTksgTE9OR0xJTktfTkFNRSBQUkVGSVhfTEVOR1RICiAgICAgICAgICAgICAgICBMQUJFTCBOQU1FX0xFTkdUSCBTVFJJUF9NT0RFCiAgICAgICAgICAgIF07CgogICAgcmVxdWlyZSBUaW1lOjpMb2NhbCBpZiAkXk8gZXEgIk1hY09TIjsKfQoKdXNlIGNvbnN0YW50IEZJTEUgICAgICAgICAgID0+IDA7CnVzZSBjb25zdGFudCBIQVJETElOSyAgICAgICA9PiAxOwp1c2UgY29uc3RhbnQgU1lNTElOSyAgICAgICAgPT4gMjsKdXNlIGNvbnN0YW50IENIQVJERVYgICAgICAgID0+IDM7CnVzZSBjb25zdGFudCBCTE9DS0RFViAgICAgICA9PiA0Owp1c2UgY29uc3RhbnQgRElSICAgICAgICAgICAgPT4gNTsKdXNlIGNvbnN0YW50IEZJRk8gICAgICAgICAgID0+IDY7CnVzZSBjb25zdGFudCBTT0NLRVQgICAgICAgICA9PiA4Owp1c2UgY29uc3RhbnQgVU5LTk9XTiAgICAgICAgPT4gOTsKdXNlIGNvbnN0YW50IExPTkdMSU5LICAgICAgID0+ICdMJzsKdXNlIGNvbnN0YW50IExBQkVMICAgICAgICAgID0+ICdWJzsKCnVzZSBjb25zdGFudCBCVUZGRVIgICAgICAgICA9PiA0MDk2Owp1c2UgY29uc3RhbnQgSEVBRCAgICAgICAgICAgPT4gNTEyOwp1c2UgY29uc3RhbnQgQkxPQ0sgICAgICAgICAgPT4gNTEyOwoKdXNlIGNvbnN0YW50IEJMT0NLX1NJWkUgICAgID0+IHN1YiB7IG15ICRuID0gaW50KCRfWzBdL0JMT0NLKTsgJG4rKyBpZiAkX1swXSAlIEJMT0NLOyAkbiAqIEJMT0NLIH07CnVzZSBjb25zdGFudCBUQVJfUEFEICAgICAgICA9PiBzdWIgeyBteSAkeCA9IHNoaWZ0IHx8IHJldHVybjsgcmV0dXJuICJcMCIgeCAoQkxPQ0sgLSAoJHggJSBCTE9DSykgKSB9Owp1c2UgY29uc3RhbnQgVEFSX0VORCAgICAgICAgPT4gIlwwIiB4IEJMT0NLOwoKdXNlIGNvbnN0YW50IFJFQURfT05MWSAgICAgID0+IHN1YiB7IHNoaWZ0KCkgPyAncmInIDogJ3InIH07CnVzZSBjb25zdGFudCBXUklURV9PTkxZICAgICA9PiBzdWIgeyAkX1swXSA/ICd3YicgLiBzaGlmdCA6ICd3JyB9Owp1c2UgY29uc3RhbnQgTU9ERV9SRUFEICAgICAgPT4gc3ViIHsgJF9bMF0gPX4gL15yLyA/IDEgOiAwIH07CgojIFBvaW50bGVzcyBhc3NpZ25tZW50IHRvIG1ha2UgLXcgc2h1dCB1cApteSAkZ2V0cHd1aWQ7ICRnZXRwd3VpZCA9ICd1bmtub3duJyB1bmxlc3MgZXZhbCB7IG15ICRmID0gZ2V0cHd1aWQgKDApOyB9OwpteSAkZ2V0Z3JnaWQ7ICRnZXRncmdpZCA9ICd1bmtub3duJyB1bmxlc3MgZXZhbCB7IG15ICRmID0gZ2V0Z3JnaWQgKDApOyB9Owp1c2UgY29uc3RhbnQgVU5BTUUgICAgICAgICAgPT4gc3ViIHsgJGdldHB3dWlkIHx8IHNjYWxhciBnZXRwd3VpZCggc2hpZnQoKSApIHx8ICcnIH07CnVzZSBjb25zdGFudCBHTkFNRSAgICAgICAgICA9PiBzdWIgeyAkZ2V0Z3JnaWQgfHwgc2NhbGFyIGdldGdyZ2lkKCBzaGlmdCgpICkgfHwgJycgfTsKdXNlIGNvbnN0YW50IFVJRCAgICAgICAgICAgID0+ICQ+Owp1c2UgY29uc3RhbnQgR0lEICAgICAgICAgICAgPT4gKHNwbGl0ICcgJywgJCkgKVswXTsKCnVzZSBjb25zdGFudCBNT0RFICAgICAgICAgICA9PiBkbyB7IDA2NjYgJiAoMDc3NyAmIH51bWFzaykgfTsKdXNlIGNvbnN0YW50IFNUUklQX01PREUgICAgID0+IHN1YiB7IHNoaWZ0KCkgJiAwNzc3IH07CnVzZSBjb25zdGFudCBDSEVDS19TVU0gICAgICA9PiAiICAgICAgIjsKCnVzZSBjb25zdGFudCBVTlBBQ0sgICAgICAgICA9PiAnQTEwMCBBOCBBOCBBOCBBMTIgQTEyIEE4IEExIEExMDAgQTYgQTIgQTMyIEEzMiBBOCBBOCBBMTU1IHgxMic7CnVzZSBjb25zdGFudCBQQUNLICAgICAgICAgICA9PiAnYTEwMCBhOCBhOCBhOCBhMTIgYTEyIEE4IGExIGExMDAgYTYgYTIgYTMyIGEzMiBhOCBhOCBhMTU1IHgxMic7CnVzZSBjb25zdGFudCBOQU1FX0xFTkdUSCAgICA9PiAxMDA7CnVzZSBjb25zdGFudCBQUkVGSVhfTEVOR1RIICA9PiAxNTU7Cgp1c2UgY29uc3RhbnQgVElNRV9PRkZTRVQgICAgPT4gKCReTyBlcSAiTWFjT1MiKSA/IFRpbWU6OkxvY2FsOjp0aW1lbG9jYWwoMCwwLDAsMSwwLDcwKSA6IDA7ICAgIAp1c2UgY29uc3RhbnQgTUFHSUMgICAgICAgICAgPT4gInVzdGFyIjsKdXNlIGNvbnN0YW50IFRBUl9WRVJTSU9OICAgID0+ICIwMCI7CnVzZSBjb25zdGFudCBMT05HTElOS19OQU1FICA9PiAnLi8uL0BMb25nTGluayc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIGFsbG93IFpMSUIgdG8gYmUgdHVybmVkIG9mZiB1c2luZyBFTlYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyBERUJVRyBvbmx5CnVzZSBjb25zdGFudCBaTElCICAgICAgICAgICA9PiBkbyB7ICEkRU5WeydQRVJMNV9BVF9OT19aTElCJ30gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsIHsgcmVxdWlyZSBJTzo6WmxpYiB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRU5WeydQRVJMNV9BVF9OT19aTElCJ30gfHwgJEAgPyAwIDogMSB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKdXNlIGNvbnN0YW50IEdaSVBfTUFHSUNfTlVNID0+IHFyL14oPzpcMDM3XDIxM3xcMDM3XDIzNSkvOwoKdXNlIGNvbnN0YW50IENBTl9DSE9XTiAgICAgID0+IGRvIHsgKCQ+ID09IDAgYW5kICReTyBuZSAiTWFjT1MiIGFuZCAkXk8gbmUgIk1TV2luMzIiKSB9Owp1c2UgY29uc3RhbnQgQ0FOX1JFQURMSU5LICAgPT4gKCReTyBuZSAnTVNXaW4zMicgYW5kICReTyAhfiAvUklTQyg/OlsgX10pP09TL2kgYW5kICReTyBuZSAnVk1TJyk7CnVzZSBjb25zdGFudCBPTl9VTklYICAgICAgICA9PiAoJF5PIG5lICdNU1dpbjMyJyBhbmQgJF5PIG5lICdNYWNPUycgYW5kICReTyBuZSAnVk1TJyk7CgoxOwo=</File>
        <File Location="Kernel/cpan-lib/Archive/Tar/File.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Archive/Tar.pm" Permission="644" Encode="Base64"></File>
        <File Location="var/httpd/htdocs/skins/Agent/default/css/Support.Default.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKQG1lZGlhIHNjcmVlbixwcm9qZWN0aW9uLHR2LGhhbmRoZWxkIHsKCi8qKgogKiBAcGFja2FnZSAgICAgU3VwcG9ydAogKiBAc2VjdGlvbiAgICAgR2VuZXJhbAogKi8KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0IHsKICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgI2FhYTsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0ID4gcCB7CiAgICBwYWRkaW5nOiAwIDAgMXB4IDM1cHg7Cn0KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0T0sgPiBwIHsKICAgIGNvbG9yOiAjODg4Owp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdE9LOmhvdmVyID4gcCB7CiAgICBjb2xvcjogIzAwMDsKfQovKioKICogQHN1YnNlY3Rpb24gIEZsYWcKICovCi5BZG1pblN1cHBvcnQgLkZsYWcgewogICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKC4uL2ltZy9mbGFnX3NoYWRvdy5wbmcpIG5vLXJlcGVhdCBzY3JvbGwgMCAwOwogICAgaGVpZ2h0OiAxOHB4OwogICAgd2lkdGg6IDI0cHg7CiAgICBmbG9hdDogbGVmdDsKICAgIG1hcmdpbjogMnB4IDEwcHggMCAwOwp9CgouQWRtaW5TdXBwb3J0IC5GbGFnLlNtYWxsIHsKICAgIHdpZHRoOiAxN3B4OwogICAgaGVpZ2h0OiAxMHB4OwogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogYm90dG9tIHJpZ2h0Owp9CgouQWRtaW5TdXBwb3J0IC5GbGFnIHNwYW4gewogICAgZGlzcGxheTogYmxvY2s7CiAgICBoZWlnaHQ6IDE2cHg7CiAgICBtYXJnaW4tcmlnaHQ6IDJweDsKICAgIHRleHQtaW5kZW50OiAtOTk5OXB4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgLyogc2V0IGEgZGVmYXVsdCBjb2xvciBmb3IgcHJpb3JpdGllcyAqLwogICAgYmFja2dyb3VuZC1jb2xvcjogI2NkY2RjZDsKfQoKLkFkbWluU3VwcG9ydCAuRmxhZy5TbWFsbCBzcGFuIHsKICAgIGhlaWdodDogOHB4Owp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdE9LIC5GbGFnIHNwYW4gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwODAwMDsKfQoKLkFkbWluU3VwcG9ydCAuQ2hlY2tSZXN1bHRGYWlsZWQgLkZsYWcgc3BhbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwOwp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdENyaXRpY2FsIC5GbGFnIHNwYW4gewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTAwMDsKfQoKLkFkbWluU3VwcG9ydCAuQ2hlY2tSZXN1bHRDcml0aWNhbCAuRmxhZyBzcGFuIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmEwMDA7Cn0KCgp9IC8qIGVuZCBAbWVkaWEgKi8=</File>
    </Filelist>
    <DatabaseInstall>
        <TableCreate Type="post" Name="support_bench_test">
            <Column Name="name_a" Required="true" Size="60" Type="VARCHAR"></Column>
            <Column Name="name_b" Required="true" Size="60" Type="VARCHAR"></Column>
            <Index Name="support_index_bench_test_name_a">
                <IndexColumn Name="name_a">
                </IndexColumn>
            </Index>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUpgrade>
        <TableCreate Type="post" Name="support_bench_test" Version="1.0.8">
            <Column Name="name_a" Required="true" Size="60" Type="VARCHAR"></Column>
            <Column Name="name_b" Required="true" Size="60" Type="VARCHAR"></Column>
            <Index Name="support_index_bench_test_name_a">
                <IndexColumn Name="name_a">
                </IndexColumn>
            </Index>
        </TableCreate>
    </DatabaseUpgrade>
    <DatabaseUninstall>
        <TableDrop Type="post" Name="support_bench_test">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>